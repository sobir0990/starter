<?php
/**
 * Created by PhpStorm.
 * User: dilshod
 * Date: 6/29/19
 * Time: 2:20 PM
 */

namespace common\components;

use common\components\traits\ActiveRecordValidatorTrait;
use common\components\traits\ModelMultiLanguageTrait;
use Yii;
use yii\base\ExitException;
use yii\db\Exception;
use yii\helpers\Html;
use yii\helpers\Json;
use yii\web\NotFoundHttpException;
use yii\web\Response;

/**
 * Class ActiveRecord
 * @package app\commands
 */
class ActiveRecord extends \yii\db\ActiveRecord
{

    use ModelMultiLanguageTrait;
//    use ActiveRecordValidatorTrait;

    /**
     * Boolean qiymatlarni qaytarishda ishlatildi
     */
    public const BOOLEAN_TRUE = 1;
    public const BOOLEAN_FALSE = 0;

    public $loggable = true;


    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {

        if(array_key_exists('updated_at',$this->attributes)){
            $this->updated_at = Time::nowFull();
        }

        if($this->isNewRecord && array_key_exists('created_at',$this->attributes)){
            $this->created_at = Time::nowFull();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * @return array|string[]
     */
    public static function primaryKey()
    {
        return ['id'];
    }


    /**
     * $fields dagi massivni tekshirib, agar ichida
     * {@see BaseActiveRecord::translateAttributes()} ga mos kelgan
     * field kelsa, shularni {@see LANGUAGES} dagi tillar bo'yicha
     * oxiriga suffix qo'yib qaytaradi
     *
     * @param $fields
     * @return array
     */
    protected function f($fields)
    {
        $result = [];
        foreach ($fields as $field) {
            if (in_array($field, static::translateAttributes())) {
                $result = array_merge($result, Language::fields($field));
            } else {
                $result[] = $field;
            }
        }
        return $result;
    }

    /**
     * Modeldagi senariolardagi fieldlarni almashtiradi
     * Example:
     * function scenarios()
     * {
     *      return $this->s([
     *          ...
     *      ]);
     * }
     *
     * @param $scenarios
     * @return mixed
     * @see BaseActiveRecord::f()
     */
    public function s($scenarios)
    {
        foreach ($scenarios as $scenario => $fields) {
            $scenarios[$scenario] = $this->f($fields);
        }

        return $scenarios;
    }

    /**
     * Model ruleslardagi fieldlarni almashtiradi
     *
     * @return array
     * @see BaseActiveRecord::f()
     */
    public function r()
    {
        $rules = [];
        $args = func_get_args();
        foreach ($args as $arg) {
            $rules = array_merge($rules, $arg);
        }

        foreach ($rules as $n => $rule) {
            if (!is_array($rule[0])) {
                $fields = [$rule[0]];
            } else {
                $fields = $rule[0];
            }

            $rule[0] = $this->f($fields);
            $rules[$n] = $rule;

        }
        return $rules;
    }

    /**
     * @param $attribute
     * @param $params
     */
    public function validateTranslateAttribute($attribute, $params)
    {

        $error = true;
        foreach ($params as $item) {
            if (strlen($this->{$item}) > 0) {
                $error = false;
            }
        }
        if ($error) {
            $this->addError($attribute, t("{attribute} cannot be blank.", [
                    'attribute' => $this->getAttributeLabel($attribute)]
            ));
        }
    }


    /**
     * Model attributeLables lardagi fieldlarni almashtiradi
     *
     * @param $labels
     * @return array
     */
    public function l($labels)
    {
        $result = [];
        foreach ($labels as $label => $title) {
            if (in_array($label, static::translateAttributes())) {
                foreach (Language::each() as $prefix => $language) {
                    $result[$label . Language::FIELD_LANG_SEPARATOR . $prefix] = $title . " (" . $language . ")";
                }
            }

            $result[$label] = $title;
        }

        return $result;
    }

    /**
     * Hints
     *
     * @param $hints
     * @return mixed
     */
    public function h($hints)
    {
        return $hints;
    }

    /**
     * @return array
     */
    public function fileAttributesBaseUrl()
    {
        return [];
    }

    /**
     * Yii2 dagi xatolikni to'g'rilaydi.
     * PK=id bo'lgan holatdagi faqat int sonlarni o'tkazadi
     * aks holda 404
     *
     * @param $condition
     * @return null|\yii\db\ActiveRecord
     * @throws NotFoundHttpException
     */
    public static function findOne($condition)
    {
        if (filter_var($condition, FILTER_VALIDATE_INT) === false)
            throw new NotFoundHttpException();

        return parent::findOne($condition); // TODO: Change the autogenerated stub
    }

    /**
     * @throws NotFoundHttpException
     * @throws ExitException
     * @deprecated $model->runValidate ishlatilsin.
     */
    public function ajaxValidation()
    {
        self::validateAjax($this);
    }

    /**
     * @throws NotFoundHttpException
     * @deprecated $model->runValidate ishlatilsin.
     */
    public function postValidation()
    {
        return self::validatePost($this);
    }

    /**
     * @return bool
     * @throws NotFoundHttpException
     * @throws ExitException
     */
    public function runValidate()
    {
        $args = func_get_args();
        array_unshift($args, $this);
        return call_user_func_array([static::class, 'validateFull'], $args);
    }

    /**
     * @return bool
     * @throws NotFoundHttpException
     * @throws ExitException
     */
    public static function validateFull()
    {
        $args = func_get_args();
        call_user_func_array([static::class, 'validateAjax'], $args);
        return call_user_func_array([static::class, 'validatePost'], $args);
    }

    /**
     * Agar kelayotgan request AJAX bo'lsa,
     * ushbu modelga yuklab validatsiyadan o'tkazadi va
     * clientga jo'natadi.
     *
     * Qo'llanishi:
     * $model->ajaxValidation()
     * @param array $list
     * @throws NotFoundHttpException Agar ma'lumotlar yuklanishda xatolik yuz bersa
     * @throws ExitException
     */
    public static function validateAjax()
    {
        if (!Yii::$app->request->isPost)
            return;

        if (!Yii::$app->request->isAjax)
            return;

        //Bu, PJAX formalarda uchun kerak
        //shu holatda, postValidation ishlaydi
        if (Yii::$app->request->isPjax)
            return;

        Yii::$app->response->format = Response::FORMAT_JSON;

        $models = func_get_args();

        foreach ($models as $model) {
            if (is_array($model)) {
                if (!self::loadMultiple($model, Yii::$app->request->post()))
                    throw new NotFoundHttpException();
            } else {
                /** @var $model ActiveRecord */
                if (!$model->load(Yii::$app->request->post()))
                    throw new NotFoundHttpException();
            }
        }

        $result = [];
        foreach ($models as $model) {
            if (is_array($model)) {
                $result = array_merge(ActiveForm::validateMultiple($model), $result);
            } else {
                $result = array_merge(ActiveForm::validate($model), $result);
            }
        }

        Yii::$app->response->data = $result;
        Yii::$app->end();
    }

    /**
     * Agar kelayotgan request POST bo'lsa
     * ushbu modelga yuklab validatsiyadan o'tkazadi
     * Agar hammasi to'g'ri bo'lsa TRUE aks holda FALSE qaytaradi.
     *
     * @return bool
     * @throws NotFoundHttpException
     */
    public static function validatePost()
    {
        if (!Yii::$app->request->isPost)
            return false;

        $models = func_get_args();

        foreach ($models as $model) {
            if (is_array($model)) {
                if (!self::loadMultiple($model, Yii::$app->request->post()))
                    throw new NotFoundHttpException();
            } else {
                /** @var $model ActiveRecord */
                if (!$model->load(Yii::$app->request->post()))
                    throw new NotFoundHttpException();
            }
        }

        foreach ($models as $model) {

            if (is_array($model)) {
                if (!Model::validateMultiple($model))
                    return false;
            } else {
                if (!$model->validate())
                    return false;
            }
        }

        return true;
    }

    /**
     * Tarjima ustunlar uchun
     *
     * @return ActiveQuery|\yii\db\ActiveQuery
     */
    public static function find()
    {
        return new ActiveQuery(get_called_class());
    }

    /**
     * Tarjimalarni massivda jsonga o'tkazish uchun
     */
    public function translateFields()
    {
        if (count(static::translateAttributes())) {
            static::setUseOriginalFieldValues(true);
            foreach (static::translateAttributes() as $translateAttribute) {
                $this->{$translateAttribute} = Json::encode($this->{$translateAttribute});
            }
        }
    }

    /**
     * Tarjimali json yoki massiv ko'rinishdagi ma'lumotlarni joriy til bo'yicha qaytaradi
     * Agar topilmasa $defaultLanguage bo'yicha, u bo'lmasa mavjud til bo'yicha ma'lumot qaytaradi
     *
     * @param $data
     * @param null $defaultLanguage
     * @return mixed|string
     */
    public static function getValueByLanguage($data, $defaultLanguage = null)
    {
        $name = '';

        if (!is_array($data)) {
            $data = Json::decode($data);
        }

        if (is_array($data) and isset($data[Yii::$app->language]) and $data[Yii::$app->language] != '') {
            $name = $data[Yii::$app->language];
        } elseif (is_array($data) and $defaultLanguage and isset($data[$defaultLanguage])) {
            $name = $data[$defaultLanguage];
        } elseif (is_array($data)) {
            foreach ($data as $item) {
                if ($item != '') {
                    $name = $item;
                    break;
                }
            }
        }
        return $name;
    }

    /**
     * @param array $attributes
     * @param string $condition
     * @param array $params
     * @param $returnColumns
     * @return array|int
     * @throws Exception
     */
    public static function updateAll($attributes, $condition = '', $params = [], ...$returnColumns)
    {
        $command = static::getDb()->createCommand();
        $command->update(static::tableName(), $attributes, $condition, $params);
        $sql = $command->rawSql;
        if ($returnColumns and is_array($returnColumns)) {
            $column = implode(', ', $returnColumns);
            $sql .= " RETURNING $column";
        }

        return static::getDb()->createCommand($sql)->queryAll();
    }

    /**
     * @param null $condition
     * @param array $params
     * @param mixed ...$returnColumns
     * @return array|int
     * @throws Exception
     */
    public static function deleteAll($condition = null, $params = [], ...$returnColumns)
    {
        $command = static::getDb()->createCommand();
        $command->delete(static::tableName(), $condition, $params);

        $sql = $command->rawSql;
        if ($returnColumns and is_array($returnColumns)) {
            $column = implode(', ', $returnColumns);
            $sql .= " RETURNING $column";
        }

        return static::getDb()->createCommand($sql)->queryAll();
    }


    /**
     * Boolean larni ro'yhatini qaytaradi
     *
     * @return array
     */
    public static function getBoolean(): array
    {
        return [
            self::BOOLEAN_TRUE => t('Yes'),
            self::BOOLEAN_FALSE => t('No'),
        ];
    }

    /**
     * @return array
     */
    public function safeAttributesWithValues()
    {
        $attributes = array_flip($this->safeAttributes());
        foreach ($attributes as $k => $v) {
            $attributes[$k] = $this->$k;
        }

        return $attributes;
    }


    /**
     * @param $models
     * @return array
     */
    public static function getErrorsList(&$models)
    {
        $result = [];
        foreach ($models as $i => $model) {
            foreach ($model->getErrors() as $attribute => $errors) {
                if ($errors) {
                    $result[Html::getInputId($model, "[$i]" . $attribute)] = $errors;
                }
            }
        }

        return $result;
    }



}