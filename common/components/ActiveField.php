<?php
/**
 * Created by PhpStorm.
 * User: shranet
 * Date: 11/7/18
 * Time: 1:31 PM
 */

namespace common\components;

use backend\assets\DropifyAsset;
use backend\widgets\JsWidget;
use borales\extensions\phoneInput\PhoneInput;
use kartik\color\ColorInput;
use kartik\select2\Select2;
use kartik\widgets\TouchSpin;
use Yii;
use yii\widgets\MaskedInput;

/**
 * Class ActiveField
 * @package app\components
 */
class ActiveField extends \yii\bootstrap4\ActiveField
{

    /**
     * @return string
     */
    public function begin()
    {
        return parent::begin() . ($this->parts['{begin}'] ?? ""); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function end()
    {
        return ($this->parts['{end}'] ?? "") . parent::end(); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $options
     * @param array $clientOptions
     * @return ActiveField
     * @throws \Exception
     */
    public function priceInput($options = [], $clientOptions = []): ActiveField
    {
        $options = [
            'options' => array_merge([
                'class' => 'form-control text-left',
            ], $options),
            'clientOptions' => array_merge([
                'groupSeparator' => ' ',
                'alias' => 'decimal',
                'autoGroup' => true,
                'min' => 0,
                'max' => 1000000000000,
            ], $clientOptions),
        ];

        return $this->widget(MaskedInput::class, $options);
    }


    /**
     * @param array $options
     * @param array $clientOptions
     * @return ActiveField
     * @throws \Exception
     */
    public function numberInput($options = [], $clientOptions = []): ActiveField
    {
        $options = [
            'options' => array_merge([
                'class' => 'form-control text-left',
            ], $options),
            'clientOptions' => array_merge([
                'groupSeparator' => ' ',
                'alias' => 'decimal',
                'min' => -1000000000,
                'max' => 1000000000,
                'autoGroup' => true
            ], $clientOptions),
        ];
        return $this->widget(MaskedInput::class, $options);
    }

    /**
     * @param array $options
     * @param array $pluginOptions
     * @return ActiveField
     * @throws \Exception
     */
    public function integerInput($options = [], $pluginOptions = []): ActiveField
    {
        $options = [
            'options' => array_merge([
                'class' => 'form-control',
            ], $options),

            'pluginOptions' => array_merge([
                'buttonup_class' => 'btn btn-default',
                'buttondown_class' => 'btn btn-default',
                'min' => 0,
                'max' => 2147483647,
                'boostat' => 5,
                'maxboostedstep' => 10,
                'verticalbuttons' => true,
                'verticalup' => '<i class="fas fa-plus"></i>',
                'verticaldown' => '<i class="fas fa-minus"></i>'
            ], $pluginOptions),
        ];

        return $this->widget(TouchSpin::class, $options);
    }

    /**
     * @param array $options
     * @param array $clientOptions
     * @return ActiveField
     * @throws \Exception
     */
    public function emailInput($options = [], $clientOptions = []): ActiveField
    {
        $options = [
            'options' => array_merge([
                'class' => 'form-control',
            ], $options),
            'clientOptions' => array_merge([
                'alias' => 'email'
            ], $clientOptions),
        ];

        return $this->widget(MaskedInput::class, $options);
    }

    /**
     * @param array $options
     * @return ActiveField
     * @throws \Exception
     */
    public function phoneInputUz($options = [])
    {
        return $this->widget(MaskedInput::class, array_merge([
            'mask' => '+\\9\\98 99 999 99 99'
        ],$options));
    }

    /**
     * @param array $options
     * @param array $jsOptions
     * @return ActiveField
     * @throws \Exception
     */
    public function phoneInput($options = [], $jsOptions = []): ActiveField
    {
        $jsOptions = array_merge([
            'nationalMode' => false,
            'preferredCountries' => ['UZ', 'KG', 'KZ', 'TJ', 'AZ', 'BY', 'AM', 'MD', 'RU', 'TM', 'TR', 'AF', 'UA'],
            'initialCountry' => 'UZ',
        ], $jsOptions);

        $configs = [
            'options' => $options,
            'jsOptions' => $jsOptions,
        ];
        return $this->widget(PhoneInput::class, array_filter($configs));
    }

    /**
     * @param array $options
     * @param array $pluginOptions
     * @return ActiveField
     * @throws \Exception
     */
    public function select2($options = [], $pluginOptions = []){
        $options['pluginOptions'] = array_merge([
        ], $pluginOptions);

        return $this->widget(Select2::class, $options);
    }

    /**
     * @param array $options
     * @param bool $size
     * @return \yii\widgets\ActiveField
     * @throws \Exception
     */
    public function dropifyFileInput($options = [])
    {
        $attributeNotExist = $file = false;
        if ($this->model->hasProperty($this->attribute)) {
            $attributeNotExist = true;
//            $file = $this->model->{$this->attribute . "Url"};
        }

        $options = array_merge([
            'class' => 'dropify',
            'data-plugin'=>"dropify",
            'data-default-file'=> ($attributeNotExist and $file) ? $file : '',
            'data-default-id' => ($attributeNotExist and $file) ? $file : '',
            'data-iamge-file-extensions' => ['png', 'jpg', 'jpeg', 'gif'],
            'data-allowed-file-extensions' => ['png', 'jpg', 'jpeg', 'gif'],
            'data-max-file-size' => '10M',
            'data-min-width' => '100',
            'data-min-height' => '100',
            'data-messages' => [
                'default' => t("Перетащите в поле фото или нажмите на него"),
                'replace' => t("Для загрузки другой фотографии перетащите в поле фото или нажмите на него"),
                'remove' => t("Очистить"),
                'error' => t("Ошибка загрузки файла")
            ],
            'data-error' => [
                'fileSize' => t("Объем фото большое (Максимальный объем: {{value}})"),
                'minWidth' => t("Ширина фото очень узкая (Минимальная ширина: {{value}}}px)"),
                'minHeight' => t("Высота фото очень низкое (Минимальная высота: {{value}}}px)"),
                'imageFormat' => t("Формат фото не поддерживается. (Резрешены только форматы {{value}})"),
                'fileExtension' => t("Резрешены только форматы {{ value }}")
            ]
        ],$options);

        DropifyAsset::register(Yii::$app->view);

        JsWidget::begin(); ?>
        <script>
            (function($) {
                var drEvent = $('[data-plugin="dropify"]').dropify();

                drEvent.on('dropify.afterClear', function (event, element) {
                    var d = $(".dropify");
                    d.closest("form").append($("<input/>").attr("type", "hidden").attr("name", "deleted[]").val(d.data("default-id")));
                });
            })(jQuery);
        </script>
        <?php
        JsWidget::end();

        return $this->fileInput($options);
    }

    public function colorInput($options = []): ActiveField
    {
        $options = [
            'options' => array_merge([
                'placeholder' => t('Выберите цвет'),
            ], $options)
        ];

        return $this->widget(ColorInput::classname(), $options);
    }

}